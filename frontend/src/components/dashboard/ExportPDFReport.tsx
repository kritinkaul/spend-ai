import { useState } from 'react';
import { Download, FileText, Loader2, CheckCircle, AlertCircle, Calendar, DollarSign, TrendingUp, Target } from 'lucide-react';
import { formatCompactCurrency } from '../../lib/utils';

interface Transaction {
  id: number;
  amount: number;
  description: string;
  category?: string;
  date: string;
}

interface Analytics {
  total_spent: number;
  total_earned: number;
  total_transactions: number;
  avg_expense?: number;
  earliest_date?: string;
  latest_date?: string;
}

interface ExportPDFReportProps {
  analytics: Analytics;
  transactions: Transaction[];
  className?: string;
}

export default function ExportPDFReport({ analytics, transactions, className = "" }: ExportPDFReportProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [lastExported, setLastExported] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Calculate additional metrics for the report
  const calculateReportMetrics = () => {
    const expenseTransactions = transactions.filter(t => t.amount < 0);
    const incomeTransactions = transactions.filter(t => t.amount > 0);
    
    // Category breakdown
    const categorySpending = expenseTransactions.reduce((acc, t) => {
      const category = t.category || 'Other';
      acc[category] = (acc[category] || 0) + Math.abs(t.amount);
      return acc;
    }, {} as Record<string, number>);

    const topCategories = Object.entries(categorySpending)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5);

    // Monthly breakdown
    const monthlyData = transactions.reduce((acc, t) => {
      const date = new Date(t.date);
      const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
      
      if (!acc[monthKey]) {
        acc[monthKey] = { income: 0, expenses: 0, net: 0 };
      }
      
      if (t.amount > 0) {
        acc[monthKey].income += t.amount;
      } else {
        acc[monthKey].expenses += Math.abs(t.amount);
      }
      acc[monthKey].net = acc[monthKey].income - acc[monthKey].expenses;
      
      return acc;
    }, {} as Record<string, { income: number; expenses: number; net: number }>);

    return {
      totalIncome: incomeTransactions.reduce((sum, t) => sum + t.amount, 0),
      totalExpenses: Math.abs(analytics.total_spent),
      netAmount: incomeTransactions.reduce((sum, t) => sum + t.amount, 0) - Math.abs(analytics.total_spent),
      avgTransaction: expenseTransactions.length > 0 ? Math.abs(analytics.total_spent) / expenseTransactions.length : 0,
      topCategories,
      monthlyData: Object.entries(monthlyData).sort(([a], [b]) => a.localeCompare(b)),
      transactionCount: {
        total: transactions.length,
        income: incomeTransactions.length,
        expenses: expenseTransactions.length
      }
    };
  };

  // Generate PDF using simple text-based approach (in production, use jsPDF)
  const generatePDFContent = () => {
    const metrics = calculateReportMetrics();
    const reportDate = new Date().toLocaleDateString();
    
    const content = `
SPENDAI FINANCIAL REPORT
Generated: ${reportDate}
====================================

EXECUTIVE SUMMARY
-----------------
Total Income: ${formatCompactCurrency(metrics.totalIncome)}
Total Expenses: ${formatCompactCurrency(metrics.totalExpenses)}
Net Amount: ${formatCompactCurrency(metrics.netAmount)}
Transaction Count: ${metrics.transactionCount.total}

SPENDING ANALYSIS
-----------------
Average Transaction: ${formatCompactCurrency(metrics.avgTransaction)}
Income Transactions: ${metrics.transactionCount.income}
Expense Transactions: ${metrics.transactionCount.expenses}

TOP SPENDING CATEGORIES
-----------------------
${metrics.topCategories.map(([category, amount], index) => 
  `${index + 1}. ${category}: ${formatCompactCurrency(amount)}`
).join('\n')}

MONTHLY BREAKDOWN
-----------------
${metrics.monthlyData.map(([month, data]) => 
  `${month}: Income ${formatCompactCurrency(data.income)}, Expenses ${formatCompactCurrency(data.expenses)}, Net ${formatCompactCurrency(data.net)}`
).join('\n')}

RECENT TRANSACTIONS
-------------------
${transactions.slice(0, 10).map(t => 
  `${new Date(t.date).toLocaleDateString()}: ${t.description} - ${formatCompactCurrency(t.amount)}`
).join('\n')}

FINANCIAL HEALTH INDICATORS
---------------------------
Expense Ratio: ${metrics.totalIncome > 0 ? ((metrics.totalExpenses / metrics.totalIncome) * 100).toFixed(1) + '%' : 'N/A'}
Savings Rate: ${metrics.totalIncome > 0 ? (((metrics.totalIncome - metrics.totalExpenses) / metrics.totalIncome) * 100).toFixed(1) + '%' : 'N/A'}

====================================
Report generated by SpendAI
${new Date().toLocaleString()}
`;

    return content;
  };

  const handleExportPDF = async () => {
    setIsGenerating(true);
    setError(null);

    try {
      // Simulate PDF generation delay
      await new Promise(resolve => setTimeout(resolve, 2000));

      // In production, use jsPDF:
      /*
      import jsPDF from 'jspdf';
      const doc = new jsPDF();
      const content = generatePDFContent();
      doc.text(content, 10, 10);
      doc.save(`SpendAI-Report-${new Date().toISOString().split('T')[0]}.pdf`);
      */

      // For demo, create a downloadable text file
      const content = generatePDFContent();
      const blob = new Blob([content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `SpendAI-Report-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      setLastExported(new Date().toLocaleString());
      console.log('ðŸ“„ PDF report generated successfully');
      
    } catch (err) {
      setError('Failed to generate PDF report');
      console.error('PDF generation error:', err);
    } finally {
      setIsGenerating(false);
    }
  };

  const metrics = calculateReportMetrics();

  return (
    <div className={`bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 shadow-sm overflow-hidden ${className}`}>
      <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-slate-50 to-gray-50 dark:from-slate-900/30 dark:to-gray-900/30">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white flex items-center">
              <FileText className="h-5 w-5 mr-2 text-slate-600" />
              Export PDF Report
            </h3>
            <p className="text-sm text-gray-600 dark:text-gray-300 mt-1">
              Download comprehensive financial summary
            </p>
          </div>
          
          <button
            onClick={handleExportPDF}
            disabled={isGenerating}
            className="flex items-center gap-2 px-4 py-2 bg-slate-600 hover:bg-slate-700 disabled:bg-slate-400 text-white rounded-lg transition-colors disabled:cursor-not-allowed"
          >
            {isGenerating ? (
              <>
                <Loader2 className="h-4 w-4 animate-spin" />
                Generating...
              </>
            ) : (
              <>
                <Download className="h-4 w-4" />
                Export PDF
              </>
            )}
          </button>
        </div>
      </div>

      <div className="p-6">
        {/* Report Preview */}
        <div className="mb-6">
          <h4 className="font-semibold text-gray-900 dark:text-white mb-4 flex items-center">
            <Calendar className="h-4 w-4 mr-2" />
            Report Preview
          </h4>
          
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
            <div className="p-3 bg-emerald-50 dark:bg-emerald-900/20 rounded-lg border border-emerald-200 dark:border-emerald-700">
              <div className="flex items-center gap-2 mb-1">
                <TrendingUp className="h-4 w-4 text-emerald-600" />
                <span className="text-sm font-medium text-emerald-800 dark:text-emerald-300">Total Income</span>
              </div>
              <p className="text-lg font-bold text-emerald-600">{formatCompactCurrency(metrics.totalIncome)}</p>
            </div>

            <div className="p-3 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-200 dark:border-red-700">
              <div className="flex items-center gap-2 mb-1">
                <TrendingUp className="h-4 w-4 text-red-600 rotate-180" />
                <span className="text-sm font-medium text-red-800 dark:text-red-300">Total Expenses</span>
              </div>
              <p className="text-lg font-bold text-red-600">{formatCompactCurrency(metrics.totalExpenses)}</p>
            </div>

            <div className="p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700">
              <div className="flex items-center gap-2 mb-1">
                <DollarSign className="h-4 w-4 text-blue-600" />
                <span className="text-sm font-medium text-blue-800 dark:text-blue-300">Net Amount</span>
              </div>
              <p className={`text-lg font-bold ${metrics.netAmount >= 0 ? 'text-blue-600' : 'text-orange-600'}`}>
                {formatCompactCurrency(metrics.netAmount)}
              </p>
            </div>

            <div className="p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg border border-purple-200 dark:border-purple-700">
              <div className="flex items-center gap-2 mb-1">
                <Target className="h-4 w-4 text-purple-600" />
                <span className="text-sm font-medium text-purple-800 dark:text-purple-300">Transactions</span>
              </div>
              <p className="text-lg font-bold text-purple-600">{metrics.transactionCount.total}</p>
            </div>
          </div>
        </div>

        {/* Report Contents */}
        <div className="mb-6">
          <h4 className="font-semibold text-gray-900 dark:text-white mb-3">Report Contents</h4>
          <div className="space-y-2">
            {[
              'Executive Summary with key financial metrics',
              'Detailed spending analysis by category',
              'Monthly income and expense breakdown',
              'Recent transaction history',
              'Financial health indicators and ratios',
              'Savings rate and expense ratio analysis'
            ].map((item, index) => (
              <div key={index} className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
                <CheckCircle className="h-4 w-4 text-green-600" />
                <span>{item}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Status Messages */}
        {error && (
          <div className="mb-4 p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700 rounded-lg">
            <div className="flex items-center gap-2 text-red-600 dark:text-red-400">
              <AlertCircle className="h-4 w-4" />
              <span className="text-sm">{error}</span>
            </div>
          </div>
        )}

        {lastExported && (
          <div className="mb-4 p-3 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-700 rounded-lg">
            <div className="flex items-center gap-2 text-green-600 dark:text-green-400">
              <CheckCircle className="h-4 w-4" />
              <span className="text-sm">Report exported successfully on {lastExported}</span>
            </div>
          </div>
        )}

        {/* Export Options */}
        <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
          <h4 className="font-semibold text-gray-900 dark:text-white mb-3">Export Options</h4>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
            <button
              onClick={handleExportPDF}
              disabled={isGenerating}
              className="flex items-center justify-center gap-2 p-3 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors disabled:opacity-50"
            >
              <FileText className="h-4 w-4" />
              <span className="text-sm">Complete Report</span>
            </button>
            
            <button
              onClick={() => {
                // Export only summary
                const metrics = calculateReportMetrics();
                const summary = `SpendAI Summary\n\nIncome: ${formatCompactCurrency(metrics.totalIncome)}\nExpenses: ${formatCompactCurrency(metrics.totalExpenses)}\nNet: ${formatCompactCurrency(metrics.netAmount)}`;
                const blob = new Blob([summary], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.download = 'SpendAI-Summary.txt';
                link.click();
                URL.revokeObjectURL(url);
              }}
              className="flex items-center justify-center gap-2 p-3 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
            >
              <DollarSign className="h-4 w-4" />
              <span className="text-sm">Summary Only</span>
            </button>
            
            <button
              onClick={() => {
                // Export transactions as CSV
                const csvContent = [
                  'Date,Description,Amount,Category',
                  ...transactions.slice(0, 100).map(t => 
                    `${t.date},"${t.description}",${t.amount},"${t.category || 'Other'}"`
                  )
                ].join('\n');
                const blob = new Blob([csvContent], { type: 'text/csv' });
                const url = URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.download = 'SpendAI-Transactions.csv';
                link.click();
                URL.revokeObjectURL(url);
              }}
              className="flex items-center justify-center gap-2 p-3 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
            >
              <Download className="h-4 w-4" />
              <span className="text-sm">Transactions CSV</span>
            </button>
          </div>
        </div>

        {/* Generation Info */}
        <div className="mt-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
          <p className="text-xs text-gray-600 dark:text-gray-400">
            <strong>Note:</strong> In production, this would generate a professionally formatted PDF using jsPDF with charts, tables, and branding. 
            Currently exports as text file for demonstration purposes.
          </p>
        </div>
      </div>
    </div>
  );
} 