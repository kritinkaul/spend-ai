// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./data/spendai.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  uploads     Upload[]
  transactions Transaction[]
  analyses    Analysis[]
  insights    Insight[]

  @@map("users")
}

model Upload {
  id        String   @id @default(cuid())
  userId    String
  fileName  String
  fileType  String
  fileSize  Int
  status    String @default("PROCESSING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("uploads")
}

model Transaction {
  id          String   @id @default(cuid())
  uploadId    String
  userId      String
  date        DateTime
  description String
  amount      Decimal
  category    String?
  subcategory String?
  merchant    String?
  isRecurring Boolean  @default(false)
  frequency   String?  // monthly, weekly, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  upload User @relation(fields: [userId], references: [id], onDelete: Cascade)
  uploadFile Upload @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Analysis {
  id                String   @id @default(cuid())
  userId            String
  period            String   // e.g., "2024-01", "2024-Q1"
  totalSpent        Decimal
  totalIncome       Decimal
  netAmount         Decimal
  categoryBreakdown String   // { "Food": 500, "Transport": 200, ... }
  topMerchants      String   // { "Amazon": 300, "Starbucks": 150, ... }
  recurringPayments String   // { "Netflix": 15.99, "Spotify": 9.99, ... }
  spendingScore     Int      // 1-100 health score
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analyses")
}

model Insight {
  id          String   @id @default(cuid())
  userId      String
  type        String
  title       String
  description String
  category    String?
  amount      Decimal?
  priority    String @default("MEDIUM")
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("insights")
}
